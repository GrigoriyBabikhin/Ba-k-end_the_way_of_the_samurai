 08 - Настройка Express + nodemon + TypeScript / Back-end - Путь Самурая / Уроки по Back-end
-Мы с вами проинициализировали нашу папку как проект. Появился файл “package.json”.
-В этом файле “сидят” зависимости, которые yarn может проинсталлировать, скачать из реестра указанные в зависимостях пакеты и положить их в папку “node_modules”.
-Мы использовали сторонний пакет - библиотеку express, которую написали другие программисты и которую мы будем переиспользовать, чтобы не создавать заново “велосипед” при построении типичных задач.
-Мы прикрутили TypeScript. Он нам очень важен для того, чтобы мы, как программисты, писали качественный код, который будет иметь меньше багов и ошибок во время исполнения. Потому что на этапе написания, компиляции, TypeScript нас останавливает, если мы написали что-то с его точки зрения неправильное.
-Мы, с помощью браузера, можем подключиться к запущенному движку V8 и проводить отладку программы.
-Таким образом, мы подготовили наше рабочее окружение для комфортной разработки с помощью библиотеки express.

09 - Основы express, rest api, практика / Back-end - Путь Самурая / Уроки по Back-end
-Мы реализовали, согласно REST-спецификации, определённый набор эндпоинтов, которые работают с ресурсом courses - условной сущности, хранящейся в имитированной базе данных.
-Реализовали CRUD-операции с нашими курсами, согласно всё той же REST API.
-Подключили промежуточный слой (middleware), который взяли из метода JSON объекта Express.

14 - Postman vs jest + supertest (e2e, тестирование api) / Backend - Путь Самурая / Уроки по Backend
-Мы проверили, что наша API работает. Не используя ни Postman, ни браузер. В скором времени мы сделаем рефакторинг кода. Запустим эти тесты и удивимся, что будет всё хорошо. Либо, если будет какая-то ошибка, мы увидим, что она случилась и у нас что-то не так.
-Рефакторинг, который мы будем делать, очень большой и фундаментальный. И, если бы не эти тесты, нам бы пришлось повторно вручную заново тестировать API.
- 1) устанавливаем пакеты вводим в терминале 'yarn add jest ts-jest @types/jest supertest @types/supertest'
- 2) создаем вводим в терминале jest config 'yarn ts-jest config:init'
- 3) в package.json пишем scripts "test": "jest"
- 4) в терминале yarn test
- Мы проверили, что наша API работает. Не используя ни Postman, ни браузер. В скором времени мы сделаем рефакторинг кода. Запустим эти тесты и удивимся, что будет всё хорошо. Либо, если будет какая-то ошибка, мы увидим, что она случилась и у нас что-то не так.
-Рефакторинг, который мы будем делать, очень большой и фундаментальный. И, если бы не эти тесты, нам бы пришлось повторно вручную заново тестировать API.

15 - express, typescript, body, query, ViewModel, InputModel, data mapping / Backend - Путь Самурая
- при типизации req, res нажимаем ctrl+p чтобы увидеть параметры.
-запрос в гугл "express request body typescript" TypeScript для определения типов тела запроса с помощью интерфейса PersoneModel
-JSDoc Reference при создании документации можно посмотреть описание ctrl+q.